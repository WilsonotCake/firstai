#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Beautiful Digit Recognition System
Improved UI design with better accuracy display
"""

import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import cv2
import numpy as np
from PIL import Image, ImageTk
import tensorflow as tf
from tensorflow import keras
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
import joblib
import os

class BeautifulDigitRecognizer:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üîç AI –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¶–∏—Ñ—Ä")

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        self.root.configure(bg='#f0f0f0')

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.root.minsize(1000, 700)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ü–µ–Ω—Ç—Ä–æ–≤–∫–∏
        self.root.bind('<Configure>', self.on_window_configure)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
        self.setup_styles()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        self.cnn_model = None
        self.rf_model = None
        self.svm_model = None

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.current_image = None
        self.processed_images = []

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        self.draw_window = None
        self.draw_canvas = None
        self.drawing = False
        self.last_x = None
        self.last_y = None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏
        self.load_or_create_models()

        self.setup_ui()

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
        style.theme_use('clam')

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
        bg_color = '#2c3e50'
        accent_color = '#3498db'
        success_color = '#27ae60'
        warning_color = '#f39c12'
        danger_color = '#e74c3c'

        # –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        style.configure('Title.TLabel',
                       font=('Segoe UI', 20, 'bold'),
                       foreground='#2c3e50',
                       background='#f0f0f0')

        style.configure('Header.TLabel',
                       font=('Segoe UI', 12, 'bold'),
                       foreground='#34495e',
                       background='#ecf0f1')

        style.configure('Result.TLabel',
                       font=('Segoe UI', 18, 'bold'),
                       foreground='#27ae60',
                       background='#ecf0f1')

        style.configure('Info.TLabel',
                       font=('Segoe UI', 10),
                       foreground='#7f8c8d',
                       background='#ecf0f1')

        style.configure('Custom.TButton',
                       font=('Segoe UI', 11, 'bold'),
                       padding=(10, 5))

        style.configure('Action.TButton',
                       font=('Segoe UI', 12, 'bold'),
                       padding=(15, 8))

    def load_or_create_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ"""
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")

        # CNN –º–æ–¥–µ–ª—å
        cnn_path = "models/enhanced_cnn_model.h5"
        if os.path.exists(cnn_path):
            try:
                self.cnn_model = keras.models.load_model(cnn_path)
                print("‚úÖ CNN –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except:
                self.cnn_model = self.create_enhanced_cnn()
        else:
            self.cnn_model = self.create_enhanced_cnn()

        # Random Forest –º–æ–¥–µ–ª—å
        rf_path = "models/enhanced_rf_model.pkl"
        if os.path.exists(rf_path):
            try:
                self.rf_model = joblib.load(rf_path)
                print("‚úÖ Random Forest –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except:
                self.rf_model = self.create_rf_model()
        else:
            self.rf_model = self.create_rf_model()

        # SVM –º–æ–¥–µ–ª—å
        svm_path = "models/enhanced_svm_model.pkl"
        if os.path.exists(svm_path):
            try:
                self.svm_model = joblib.load(svm_path)
                print("‚úÖ SVM –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except:
                self.svm_model = self.create_svm_model()
        else:
            self.svm_model = self.create_svm_model()

    def create_enhanced_cnn(self):
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é CNN –º–æ–¥–µ–ª—å"""
        print("üß† –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π CNN –º–æ–¥–µ–ª–∏...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º MNIST –¥–∞–Ω–Ω—ã–µ
        (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

        # –†–∞—Å—à–∏—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        x_train_augmented, y_train_augmented = self.augment_data(x_train, y_train)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        x_train_augmented = x_train_augmented.astype('float32') / 255.0
        x_test = x_test.astype('float32') / 255.0

        # Reshape –¥–ª—è CNN
        x_train_augmented = x_train_augmented.reshape(-1, 28, 28, 1)
        x_test = x_test.reshape(-1, 28, 28, 1)

        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é CNN –º–æ–¥–µ–ª—å
        model = keras.Sequential([
            keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
            keras.layers.BatchNormalization(),
            keras.layers.Conv2D(32, (3, 3), activation='relu'),
            keras.layers.MaxPooling2D((2, 2)),
            keras.layers.Dropout(0.25),

            keras.layers.Conv2D(64, (3, 3), activation='relu'),
            keras.layers.BatchNormalization(),
            keras.layers.Conv2D(64, (3, 3), activation='relu'),
            keras.layers.MaxPooling2D((2, 2)),
            keras.layers.Dropout(0.25),

            keras.layers.Conv2D(128, (3, 3), activation='relu'),
            keras.layers.BatchNormalization(),
            keras.layers.Dropout(0.25),

            keras.layers.GlobalAveragePooling2D(),
            keras.layers.Dense(512, activation='relu'),
            keras.layers.BatchNormalization(),
            keras.layers.Dropout(0.5),
            keras.layers.Dense(256, activation='relu'),
            keras.layers.Dropout(0.3),
            keras.layers.Dense(10, activation='softmax')
        ])

        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        model.compile(
            optimizer=keras.optimizers.Adam(learning_rate=0.001),
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy']
        )

        # –û–±—É—á–µ–Ω–∏–µ —Å callbacks
        callbacks = [
            keras.callbacks.EarlyStopping(patience=3, restore_best_weights=True),
            keras.callbacks.ReduceLROnPlateau(factor=0.5, patience=2)
        ]

        model.fit(
            x_train_augmented, y_train_augmented,
            epochs=15,
            validation_data=(x_test, y_test),
            callbacks=callbacks,
            verbose=1,
            batch_size=128
        )

        model.save("models/enhanced_cnn_model.h5")
        print("‚úÖ CNN –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return model

    def augment_data(self, x_train, y_train):
        """–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        print("üìà –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")

        augmented_x = []
        augmented_y = []

        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        augmented_x.extend(x_train)
        augmented_y.extend(y_train)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤–µ—Ä–Ω—É—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for angle in [-15, -10, -5, 5, 10, 15]:
            for i in range(0, len(x_train), 10):  # –ö–∞–∂–¥–æ–µ 10-–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                rotated = self.rotate_image(x_train[i], angle)
                augmented_x.append(rotated)
                augmented_y.append(y_train[i])

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—à—É–º–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for i in range(0, len(x_train), 5):  # –ö–∞–∂–¥–æ–µ 5-–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            noisy = self.add_noise(x_train[i])
            augmented_x.append(noisy)
            augmented_y.append(y_train[i])

        return np.array(augmented_x), np.array(augmented_y)

    def rotate_image(self, image, angle):
        """–ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        center = tuple(np.array(image.shape[1::-1]) / 2)
        rot_mat = cv2.getRotationMatrix2D(center, angle, 1.0)
        return cv2.warpAffine(image, rot_mat, image.shape[1::-1], flags=cv2.INTER_LINEAR)

    def add_noise(self, image):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞"""
        noise = np.random.normal(0, 25, image.shape)
        noisy = image + noise
        return np.clip(noisy, 0, 255).astype(np.uint8)

    def create_rf_model(self):
        """–°–æ–∑–¥–∞–µ—Ç Random Forest –º–æ–¥–µ–ª—å"""
        print("üå≥ –°–æ–∑–¥–∞–Ω–∏–µ Random Forest –º–æ–¥–µ–ª–∏...")

        (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        x_train_features = np.array([self.extract_features(img) for img in x_train])

        model = RandomForestClassifier(n_estimators=100, random_state=42, n_jobs=-1)
        model.fit(x_train_features, y_train)

        joblib.dump(model, "models/enhanced_rf_model.pkl")
        print("‚úÖ Random Forest –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return model

    def create_svm_model(self):
        """–°–æ–∑–¥–∞–µ—Ç SVM –º–æ–¥–µ–ª—å"""
        print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ SVM –º–æ–¥–µ–ª–∏...")

        (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–≤—ã–±–æ—Ä–∫—É –¥–ª—è SVM (–±—ã—Å—Ç—Ä–µ–µ –æ–±—É—á–µ–Ω–∏–µ)
        indices = np.random.choice(len(x_train), 10000, replace=False)
        x_train_sample = x_train[indices]
        y_train_sample = y_train[indices]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        x_train_features = np.array([self.extract_features(img) for img in x_train_sample])

        model = SVC(kernel='rbf', probability=True, random_state=42)
        model.fit(x_train_features, y_train_sample)

        joblib.dump(model, "models/enhanced_svm_model.pkl")
        print("‚úÖ SVM –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return model

    def extract_features(self, image):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        features = []

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        features.extend([
            np.mean(image), np.std(image), np.min(image), np.max(image)
        ])

        # –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª–µ–π –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö
        h, w = image.shape
        regions = [
            image[:h//3, :w//3],      # –í–µ—Ä—Ö-–ª–µ–≤–æ
            image[:h//3, w//3:2*w//3], # –í–µ—Ä—Ö-—Ü–µ–Ω—Ç—Ä
            image[:h//3, 2*w//3:],     # –í–µ—Ä—Ö-–ø—Ä–∞–≤–æ
            image[h//3:2*h//3, :w//3], # –¶–µ–Ω—Ç—Ä-–ª–µ–≤–æ
            image[h//3:2*h//3, w//3:2*w//3], # –¶–µ–Ω—Ç—Ä
            image[h//3:2*h//3, 2*w//3:], # –¶–µ–Ω—Ç—Ä-–ø—Ä–∞–≤–æ
            image[2*h//3:, :w//3],     # –ù–∏–∑-–ª–µ–≤–æ
            image[2*h//3:, w//3:2*w//3], # –ù–∏–∑-—Ü–µ–Ω—Ç—Ä
            image[2*h//3:, 2*w//3:]    # –ù–∏–∑-–ø—Ä–∞–≤–æ
        ]

        for region in regions:
            features.extend([
                np.mean(region > 128),  # –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –±–µ–ª—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
                np.sum(region > 128)    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
            ])

        # –ü—Ä–æ–µ–∫—Ü–∏–∏
        h_proj = np.sum(image > 128, axis=1)
        v_proj = np.sum(image > 128, axis=0)

        features.extend([
            np.max(h_proj), np.mean(h_proj), np.std(h_proj),
            np.max(v_proj), np.mean(v_proj), np.std(v_proj)
        ])

        return features

    def advanced_preprocessing(self, image):
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if image is None:
            return []

        processed_versions = []

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
        if len(image.shape) == 3:
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        else:
            gray = image.copy()

        # –í–µ—Ä—Å–∏—è 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        processed_versions.append(self.standard_preprocessing(gray))

        # –í–µ—Ä—Å–∏—è 2: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        processed_versions.append(self.contrast_preprocessing(gray))

        # –í–µ—Ä—Å–∏—è 3: –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        processed_versions.append(self.morphological_preprocessing(gray))

        # –í–µ—Ä—Å–∏—è 4: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        processed_versions.append(self.adaptive_preprocessing(gray))

        return [img for img in processed_versions if img is not None]

    def standard_preprocessing(self, gray):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        try:
            # –†–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞
            blurred = cv2.GaussianBlur(gray, (3, 3), 0)

            # –ü–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if np.mean(blurred) > 127:
                _, thresh = cv2.threshold(blurred, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
            else:
                _, thresh = cv2.threshold(blurred, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

            return self.extract_and_resize(thresh)
        except:
            return None

    def contrast_preprocessing(self, gray):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —É–ª—É—á—à–µ–Ω–∏–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞"""
        try:
            # CLAHE –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
            enhanced = clahe.apply(gray)

            # –ü–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            _, thresh = cv2.threshold(enhanced, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

            return self.extract_and_resize(thresh)
        except:
            return None

    def morphological_preprocessing(self, gray):
        """–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        try:
            # –ü–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

            # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            kernel = np.ones((2,2), np.uint8)
            opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)
            closing = cv2.morphologyEx(opening, cv2.MORPH_CLOSE, kernel)

            return self.extract_and_resize(closing)
        except:
            return None

    def adaptive_preprocessing(self, gray):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        try:
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            thresh = cv2.adaptiveThreshold(
                gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2
            )

            return self.extract_and_resize(thresh)
        except:
            return None

    def extract_and_resize(self, binary_image):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞"""
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã
        contours, _ = cv2.findContours(binary_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        if contours:
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç—É—Ä
            largest_contour = max(contours, key=cv2.contourArea)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—É—Ä–∞
            if cv2.contourArea(largest_contour) < 50:
                digit_roi = binary_image
            else:
                x, y, w, h = cv2.boundingRect(largest_contour)

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
                margin = max(w, h) // 4
                x = max(0, x - margin)
                y = max(0, y - margin)
                w = min(binary_image.shape[1] - x, w + 2 * margin)
                h = min(binary_image.shape[0] - y, h + 2 * margin)

                digit_roi = binary_image[y:y+h, x:x+w]
        else:
            digit_roi = binary_image

        # –î–µ–ª–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        h, w = digit_roi.shape
        size = max(h, w)
        square = np.zeros((size, size), dtype=np.uint8)

        y_offset = (size - h) // 2
        x_offset = (size - w) // 2
        square[y_offset:y_offset+h, x_offset:x_offset+w] = digit_roi

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã (20% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞)
        padded_size = int(size * 1.4)
        padded = np.zeros((padded_size, padded_size), dtype=np.uint8)
        pad_offset = (padded_size - size) // 2
        padded[pad_offset:pad_offset+size, pad_offset:pad_offset+size] = square

        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 28x28
        resized = cv2.resize(padded, (28, 28), interpolation=cv2.INTER_AREA)

        return resized

    def ensemble_predict(self, processed_images):
        """–ê–Ω—Å–∞–º–±–ª–µ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        if not processed_images:
            return None, 0

        all_predictions = []

        for img in processed_images:
            predictions = {}

            # CNN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            try:
                cnn_input = img.reshape(1, 28, 28, 1).astype('float32') / 255.0
                cnn_pred = self.cnn_model.predict(cnn_input, verbose=0)[0]
                predictions['cnn'] = cnn_pred
            except:
                predictions['cnn'] = np.zeros(10)

            # Random Forest –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            try:
                features = self.extract_features(img).reshape(1, -1)
                rf_pred = self.rf_model.predict_proba(features)[0]
                predictions['rf'] = rf_pred
            except:
                predictions['rf'] = np.zeros(10)

            # SVM –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            try:
                features = self.extract_features(img).reshape(1, -1)
                svm_pred = self.svm_model.predict_proba(features)[0]
                predictions['svm'] = svm_pred
            except:
                predictions['svm'] = np.zeros(10)

            all_predictions.append(predictions)

        # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
        weights = {'cnn': 0.6, 'rf': 0.25, 'svm': 0.15}
        final_prediction = np.zeros(10)

        for pred_dict in all_predictions:
            weighted_pred = np.zeros(10)
            total_weight = 0

            for model_name, weight in weights.items():
                if model_name in pred_dict:
                    weighted_pred += pred_dict[model_name] * weight
                    total_weight += weight

            if total_weight > 0:
                weighted_pred /= total_weight
                final_prediction += weighted_pred

        final_prediction /= len(all_predictions)

        predicted_digit = np.argmax(final_prediction)
        confidence = np.max(final_prediction)

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        second_best = np.partition(final_prediction, -2)[-2]
        confidence_gap = confidence - second_best

        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Ä–∞–∑—Ä—ã–≤–∞
        normalized_confidence = min(100, (confidence * 100) + (confidence_gap * 50))

        return predicted_digit, normalized_confidence, final_prediction

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_canvas = tk.Canvas(self.root, bg='#f0f0f0')
        main_canvas.grid(row=0, column=0, sticky='nsew', padx=10, pady=10)

        scrollbar = ttk.Scrollbar(self.root, orient='vertical', command=main_canvas.yview)
        scrollbar.grid(row=0, column=1, sticky='ns')
        main_canvas.configure(yscrollcommand=scrollbar.set)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        main_frame = tk.Frame(main_canvas, bg='#f0f0f0', padx=15, pady=15)
        self.main_frame = main_frame
        self.main_canvas = main_canvas
        main_canvas.create_window((0, 0), window=main_frame, anchor='n')

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(main_frame, bg='#f0f0f0')
        header_frame.pack(fill='x', pady=(0, 20))

        title_label = ttk.Label(header_frame, text="üîç AI –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¶–∏—Ñ—Ä", style='Title.TLabel')
        title_label.pack()

        subtitle_label = ttk.Label(header_frame, text="–ü–µ—Ä–µ–¥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
                                 font=('Segoe UI', 10), foreground='#7f8c8d', background='#f0f0f0')
        subtitle_label.pack()

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        buttons_frame = tk.Frame(main_frame, bg='#f0f0f0')
        buttons_frame.pack(fill='x', pady=(0, 15))

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ—Ä–µ–π–º –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        buttons_center = tk.Frame(buttons_frame, bg='#f0f0f0')
        buttons_center.pack(expand=True)

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        load_btn = tk.Button(buttons_center, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                           command=self.load_image,
                           bg='#3498db', fg='white', font=('Segoe UI', 11, 'bold'),
                           padx=20, pady=10, relief='flat', cursor='hand2')
        load_btn.pack(side='left', padx=10)

        recognize_btn = tk.Button(buttons_center, text="üß† –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–∏—Ñ—Ä—É",
                                command=self.recognize_digit,
                                bg='#27ae60', fg='white', font=('Segoe UI', 11, 'bold'),
                                padx=20, pady=10, relief='flat', cursor='hand2')
        recognize_btn.pack(side='left', padx=10)

        draw_btn = tk.Button(buttons_center, text="‚úèÔ∏è –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å",
                           command=self.open_draw_window,
                           bg='#9b59b6', fg='white', font=('Segoe UI', 11, 'bold'),
                           padx=20, pady=10, relief='flat', cursor='hand2')
        draw_btn.pack(side='left', padx=10)

        clear_btn = tk.Button(buttons_center, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
                            command=self.clear_all,
                            bg='#e74c3c', fg='white', font=('Segoe UI', 11, 'bold'),
                            padx=20, pady=10, relief='flat', cursor='hand2')
        clear_btn.pack(side='left', padx=10)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_container = tk.Frame(main_frame, bg='#ecf0f1', relief='solid', bd=1)
        images_container.pack(fill='x', pady=(0, 15))

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_header = tk.Label(images_container, text="üì∑ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                               font=('Segoe UI', 12, 'bold'), bg='#ecf0f1', fg='#2c3e50')
        images_header.pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        images_frame = tk.Frame(images_container, bg='#ecf0f1')
        images_frame.pack(expand=True, pady=(0, 15))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_center = tk.Frame(images_frame, bg='#ecf0f1')
        images_center.pack(expand=True)

        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        original_container = tk.Frame(images_center, bg='white', relief='solid', bd=2)
        original_container.pack(side='left', padx=15)

        original_title = tk.Label(original_container, text="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                                font=('Segoe UI', 10, 'bold'), bg='white', fg='#34495e')
        original_title.pack(pady=(8, 5))

        self.original_label = tk.Label(original_container, text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n—Ü–∏—Ñ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                                     bg='white', fg='#95a5a6', font=('Segoe UI', 9))
        self.original_label.pack(padx=15, pady=(0, 10))

        # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        processed_container = tk.Frame(images_center, bg='white', relief='solid', bd=2)
        processed_container.pack(side='left', padx=15)

        processed_title = tk.Label(processed_container, text="–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                                 font=('Segoe UI', 10, 'bold'), bg='white', fg='#34495e')
        processed_title.pack(pady=(8, 5))

        processed_grid = tk.Frame(processed_container, bg='white')
        processed_grid.pack(padx=15, pady=(0, 10))

        self.processed_labels = []
        for i in range(4):
            row = i // 2
            col = i % 2
            label = tk.Label(processed_grid, text="‚Äî", bg='#f8f9fa', fg='#95a5a6',
                           relief='solid', bd=1)
            label.grid(row=row, column=col, padx=3, pady=3)
            self.processed_labels.append(label)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_container = tk.Frame(main_frame, bg='#ecf0f1', relief='solid', bd=1)
        result_container.pack(fill='x', pady=(0, 15))

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_header = tk.Label(result_container, text="üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
                               font=('Segoe UI', 12, 'bold'), bg='#ecf0f1', fg='#2c3e50')
        result_header.pack(pady=10)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.result_label = tk.Label(result_container, text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–∏—Ñ—Ä—É'",
                                   font=('Segoe UI', 16, 'bold'), bg='#ecf0f1', fg='#7f8c8d')
        self.result_label.pack(pady=(0, 15))

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        details_container = tk.Frame(main_frame, bg='#ecf0f1', relief='solid', bd=1)
        details_container.pack(fill='both', expand=True)

        details_header = tk.Label(details_container, text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                                font=('Segoe UI', 12, 'bold'), bg='#ecf0f1', fg='#2c3e50')
        details_header.pack(pady=10)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        text_frame = tk.Frame(details_container, bg='#ecf0f1')
        text_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))

        self.details_text = tk.Text(text_frame, height=6, font=('Consolas', 9),
                                  bg='white', fg='#2c3e50', relief='solid', bd=1)
        details_scrollbar = ttk.Scrollbar(text_frame, orient='vertical', command=self.details_text.yview)
        self.details_text.configure(yscrollcommand=details_scrollbar.set)

        self.details_text.pack(side='left', fill='both', expand=True)
        details_scrollbar.pack(side='right', fill='y')

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(main_frame, mode='indeterminate', style='Custom.Horizontal.TProgressbar')
        self.progress.pack(fill='x', pady=10)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        def update_scroll_region(event):
            main_canvas.configure(scrollregion=main_canvas.bbox('all'))
            self.center_content()

        main_frame.bind('<Configure>', update_scroll_region)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ –∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
        def on_mousewheel(event):
            main_canvas.yview_scroll(int(-1*(event.delta/120)), "units")

        main_canvas.bind("<MouseWheel>", on_mousewheel)

    def load_image(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–∏—Ñ—Ä—ã",
            filetypes=[
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.jpg *.jpeg *.bmp"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )

        if file_path:
            try:
                self.current_image = cv2.imread(file_path)
                if self.current_image is None:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    return

                self.show_original_image()
                self.preprocess_and_show()

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")

    def show_original_image(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        if self.current_image is not None:
            display_image = cv2.resize(self.current_image, (200, 200))
            display_image = cv2.cvtColor(display_image, cv2.COLOR_BGR2RGB)

            pil_image = Image.fromarray(display_image)
            photo = ImageTk.PhotoImage(pil_image)

            self.original_label.config(image=photo, text="", width=200, height=200)
            self.original_label.image = photo

    def preprocess_and_show(self):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        if self.current_image is None:
            return

        self.processed_images = self.advanced_preprocessing(self.current_image)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for i, label in enumerate(self.processed_labels):
            if i < len(self.processed_images) and self.processed_images[i] is not None:
                img = self.processed_images[i]
                display_img = cv2.resize(img, (90, 90), interpolation=cv2.INTER_NEAREST)
                display_img = cv2.cvtColor(display_img, cv2.COLOR_GRAY2RGB)

                pil_image = Image.fromarray(display_img)
                photo = ImageTk.PhotoImage(pil_image)

                label.config(image=photo, text="", width=90, height=90)
                label.image = photo
            else:
                label.config(image="", text="‚Äî", width=90, height=90)
                label.image = None

    def recognize_digit(self):
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä—ã"""
        if not self.processed_images:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        try:
            self.progress.start()
            self.root.update()

            # –ê–Ω—Å–∞–º–±–ª–µ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            result = self.ensemble_predict(self.processed_images)

            if result[0] is not None:
                predicted_digit, confidence, probabilities = result

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)
                result_text = f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞: {predicted_digit}"
                self.result_label.config(text=result_text, fg='#27ae60')

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                self.show_detailed_analysis(probabilities, predicted_digit)
            else:
                self.result_label.config(text="–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", fg='#e74c3c')

            self.progress.stop()

        except Exception as e:
            self.progress.stop()
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {str(e)}")

    def show_detailed_analysis(self, probabilities, predicted_digit):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        self.details_text.delete(1.0, tk.END)

        analysis = "üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê\n"
        analysis += "=" * 50 + "\n\n"
        analysis += f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞: {predicted_digit}\n\n"

        analysis += "üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä—ã:\n"
        analysis += "-" * 40 + "\n"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        sorted_probs = [(i, prob) for i, prob in enumerate(probabilities)]
        sorted_probs.sort(key=lambda x: x[1], reverse=True)

        for i, (digit, prob) in enumerate(sorted_probs):
            percentage = prob * 100
            if i == 0:  # –ü–µ—Ä–≤–∞—è (—Å–∞–º–∞—è –≤–µ—Ä–æ—è—Ç–Ω–∞—è)
                bar = "‚ñà" * min(20, int(percentage // 2))
                analysis += f"ü•á –¶–∏—Ñ—Ä–∞ {digit}: {percentage:5.1f}% {bar}\n"
            elif i == 1:  # –í—Ç–æ—Ä–∞—è
                bar = "‚ñì" * min(20, int(percentage // 2))
                analysis += f"ü•à –¶–∏—Ñ—Ä–∞ {digit}: {percentage:5.1f}% {bar}\n"
            elif i == 2:  # –¢—Ä–µ—Ç—å—è
                bar = "‚ñí" * min(20, int(percentage // 2))
                analysis += f"ü•â –¶–∏—Ñ—Ä–∞ {digit}: {percentage:5.1f}% {bar}\n"
            else:
                bar = "‚ñë" * min(20, int(percentage // 2))
                analysis += f"   –¶–∏—Ñ—Ä–∞ {digit}: {percentage:5.1f}% {bar}\n"

        analysis += "\n" + "=" * 50 + "\n"
        analysis += f"üî¨ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(self.processed_images)}\n"
        analysis += "üß† –ú–æ–¥–µ–ª–∏: CNN (60%) + Random Forest (25%) + SVM (15%)\n"
        analysis += "‚ö° –ú–µ—Ç–æ–¥: –ê–Ω—Å–∞–º–±–ª–µ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏\n"
        analysis += "üé® –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        top_prob = sorted_probs[0][1] * 100
        second_prob = sorted_probs[1][1] * 100
        gap = top_prob - second_prob

        analysis += "\n" + "üí° –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê:\n"
        analysis += "-" * 40 + "\n"

        if gap > 40:
            analysis += "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–µ–Ω—å –Ω–∞–¥–µ–∂–Ω—ã–π\n"
        elif gap > 20:
            analysis += "üëç –•–æ—Ä–æ—à–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–¥–µ–∂–Ω—ã–π\n"
        elif gap > 10:
            analysis += "‚ö†Ô∏è  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π\n"
        else:
            analysis += "‚ùì –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã\n"

        if top_prob > 80:
            analysis += "üéØ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏\n"
        elif top_prob > 60:
            analysis += "üëå –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏\n"
        elif top_prob > 40:
            analysis += "ü§î –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏\n"
        else:
            analysis += "‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"

        self.details_text.insert(tk.END, analysis)

    def clear_all(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.current_image = None
        self.processed_images = []

        self.original_label.config(image="", text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n—Ü–∏—Ñ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", width=20, height=10)
        self.original_label.image = None

        for label in self.processed_labels:
            label.config(image="", text="‚Äî", width=10, height=5)
            label.image = None

        self.result_label.config(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–∏—Ñ—Ä—É'", fg='#7f8c8d')
        self.details_text.delete(1.0, tk.END)

    def open_draw_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä"""
        if self.draw_window is not None:
            self.draw_window.lift()
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        self.draw_window = tk.Toplevel(self.root)
        self.draw_window.title("‚úèÔ∏è –ù–∞—Ä–∏—Å—É–π—Ç–µ —Ü–∏—Ñ—Ä—É")
        self.draw_window.geometry("400x500")
        self.draw_window.configure(bg='#f0f0f0')
        self.draw_window.resizable(False, False)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        self.center_draw_window()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(self.draw_window, text="‚úèÔ∏è –ù–∞—Ä–∏—Å—É–π—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 9",
                         font=('Segoe UI', 14, 'bold'), bg='#f0f0f0', fg='#2c3e50')
        header.pack(pady=10)

        instruction = tk.Label(self.draw_window, text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—ã—à—å –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è. –†–∏—Å—É–π—Ç–µ –∫—Ä—É–ø–Ω–æ –∏ —á–µ—Ç–∫–æ!",
                              font=('Segoe UI', 10), bg='#f0f0f0', fg='#7f8c8d')
        instruction.pack(pady=(0, 10))

        # –•–æ–ª—Å—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        canvas_frame = tk.Frame(self.draw_window, bg='white', relief='solid', bd=2)
        canvas_frame.pack(padx=20, pady=10)

        self.draw_canvas = tk.Canvas(canvas_frame, width=280, height=280, bg='white', cursor='crosshair')
        self.draw_canvas.pack(padx=10, pady=10)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
        self.draw_canvas.bind("<Button-1>", self.start_drawing)
        self.draw_canvas.bind("<B1-Motion>", self.draw)
        self.draw_canvas.bind("<ButtonRelease-1>", self.stop_drawing)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(self.draw_window, bg='#f0f0f0')
        buttons_frame.pack(pady=10)

        analyze_btn = tk.Button(buttons_frame, text="üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
                               command=self.analyze_drawing,
                               bg='#27ae60', fg='white', font=('Segoe UI', 11, 'bold'),
                               padx=20, pady=8, relief='flat', cursor='hand2')
        analyze_btn.pack(side='left', padx=5)

        clear_draw_btn = tk.Button(buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª—Å—Ç",
                                  command=self.clear_canvas,
                                  bg='#e74c3c', fg='white', font=('Segoe UI', 11, 'bold'),
                                  padx=20, pady=8, relief='flat', cursor='hand2')
        clear_draw_btn.pack(side='left', padx=5)

        close_btn = tk.Button(buttons_frame, text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                             command=self.close_draw_window,
                             bg='#95a5a6', fg='white', font=('Segoe UI', 11, 'bold'),
                             padx=20, pady=8, relief='flat', cursor='hand2')
        close_btn.pack(side='left', padx=5)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.draw_window.protocol("WM_DELETE_WINDOW", self.close_draw_window)

    def center_draw_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
        self.draw_window.update_idletasks()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        main_x = self.root.winfo_x()
        main_y = self.root.winfo_y()
        main_width = self.root.winfo_width()
        main_height = self.root.winfo_height()

        # –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        draw_width = 400
        draw_height = 500

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∞ –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        pos_x = main_x + main_width + 20
        pos_y = main_y + (main_height - draw_height) // 2

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        screen_width = self.draw_window.winfo_screenwidth()
        if pos_x + draw_width > screen_width:
            pos_x = main_x - draw_width - 20

        self.draw_window.geometry(f"{draw_width}x{draw_height}+{pos_x}+{pos_y}")

    def start_drawing(self, event):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ"""
        self.drawing = True
        self.last_x = event.x
        self.last_y = event.y

    def draw(self, event):
        """–†–∏—Å—É–µ—Ç –ª–∏–Ω–∏—é"""
        if self.drawing:
            # –†–∏—Å—É–µ–º –ø–ª–∞–≤–Ω—É—é –ª–∏–Ω–∏—é
            self.draw_canvas.create_line(
                self.last_x, self.last_y, event.x, event.y,
                width=12, fill='black', capstyle=tk.ROUND,
                smooth=tk.TRUE, splinesteps=36
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ª–∏–Ω–∏–π
            self.draw_canvas.create_oval(
                event.x - 6, event.y - 6, event.x + 6, event.y + 6,
                fill='black', outline='black'
            )
            self.last_x = event.x
            self.last_y = event.y

    def stop_drawing(self, event):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ"""
        self.drawing = False

    def clear_canvas(self):
        """–û—á–∏—â–∞–µ—Ç —Ö–æ–ª—Å—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
        self.draw_canvas.delete("all")

    def analyze_drawing(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—É—é —Ü–∏—Ñ—Ä—É"""
        if self.draw_canvas is None:
            return

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ö–æ–ª—Å—Ç–∞
            canvas_image = self.canvas_to_image()

            if canvas_image is not None:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.current_image = canvas_image

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ
                self.show_original_image()
                self.preprocess_and_show()

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
                self.close_draw_window()

                # –ü–æ–¥–Ω–∏–º–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
                self.root.lift()
                self.root.focus_force()

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.result_label.config(
                    text="–ù–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–∏—Ñ—Ä—É'",
                    fg='#27ae60'
                )
            else:
                self.result_label.config(text="–û—à–∏–±–∫–∞: –Ω–∞—Ä–∏—Å—É–π—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞ —Ö–æ–ª—Å—Ç–µ", fg='#e74c3c')

        except Exception as e:
            self.result_label.config(text=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}", fg='#e74c3c')

    def canvas_to_image(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ö–æ–ª—Å—Ç–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∏—Å—É–Ω–∫–∞
            bbox = self.draw_canvas.bbox("all")
            if bbox is None:
                return None

            # –°–æ–∑–¥–∞–µ–º –±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_array = np.ones((280, 280, 3), dtype=np.uint8) * 255

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ö–æ–ª—Å—Ç–∞ (–ª–∏–Ω–∏–∏)
            items = self.draw_canvas.find_all()

            for item in items:
                coords = self.draw_canvas.coords(item)
                if len(coords) >= 4:
                    # –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    for i in range(0, len(coords) - 2, 2):
                        x1 = max(0, min(279, int(coords[i])))
                        y1 = max(0, min(279, int(coords[i + 1])))
                        x2 = max(0, min(279, int(coords[i + 2])))
                        y2 = max(0, min(279, int(coords[i + 3])))

                        # –†–∏—Å—É–µ–º —Ç–æ–ª—Å—Ç—É—é –ª–∏–Ω–∏—é
                        cv2.line(img_array, (x1, y1), (x2, y2), (0, 0, 0), 12)
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥–∏ –Ω–∞ –∫–æ–Ω—Ü–∞—Ö –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
                        cv2.circle(img_array, (x1, y1), 6, (0, 0, 0), -1)
                        cv2.circle(img_array, (x2, y2), 6, (0, 0, 0), -1)

            return img_array

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    def close_draw_window(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è"""
        if self.draw_window is not None:
            self.draw_window.destroy()
            self.draw_window = None
            self.draw_canvas = None

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        window_width = 1200
        window_height = 800

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
        self.root.update_idletasks()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()

        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        pos_x = (screen_width - window_width) // 2
        pos_y = (screen_height - window_height) // 2

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞
        self.root.geometry(f"{window_width}x{window_height}+{pos_x}+{pos_y}")

    def center_content(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–∞–Ω–≤–∞—Å–µ"""
        if hasattr(self, 'main_canvas') and hasattr(self, 'main_frame'):
            self.main_canvas.update_idletasks()

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–Ω–≤–∞—Å–∞ –∏ —Ñ—Ä–µ–π–º–∞
            canvas_width = self.main_canvas.winfo_width()
            frame_width = self.main_frame.winfo_reqwidth()

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            if canvas_width > frame_width:
                x_pos = (canvas_width - frame_width) // 2
            else:
                x_pos = 0

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            self.main_canvas.coords(self.main_canvas.find_all()[0], x_pos, 0)

    def on_window_configure(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        if event.widget == self.root:
            self.root.after(10, self.center_content)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.root.after(100, self.center_content)
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = BeautifulDigitRecognizer()
    app.run()

if __name__ == "__main__":
    main()
